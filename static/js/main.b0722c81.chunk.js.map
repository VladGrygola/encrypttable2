{"version":3,"sources":["App.js","index.js"],"names":["Object","defineProperty","Array","prototype","value","chunkSize","temporal","i","this","length","push","slice","originalAlphabetArray","split","alphabetlGrid","chunk","App","s","useState","arrayClone","arr","copy","isArray","Error","keyGrid","setKeyGrid","keyWord","setKeyWord","sourceText","setSourceText","decryptString","map","c","x","y","row","column","dectyptChar","join","isValidString","some","e","includes","useEffect","key","filter","className","type","onChange","target","from","Set","enctyptChar","char","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0722c81.chunk.js","sourcesContent":["/* eslint-disable no-extend-native */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\n\r\nObject.defineProperty(Array.prototype, 'chunk', {\r\n  value: function (chunkSize) {\r\n    var temporal = [];\r\n\r\n    for (var i = 0; i < this.length; i += chunkSize) {\r\n      temporal.push(this.slice(i, i + chunkSize));\r\n    }\r\n\r\n    return temporal;\r\n  },\r\n});\r\n\r\nfunction arrayClone(arr) {\r\n  var i, copy;\r\n\r\n  if (Array.isArray(arr)) {\r\n    copy = arr.slice(0);\r\n    for (i = 0; i < copy.length; i++) {\r\n      copy[i] = arrayClone(copy[i]);\r\n    }\r\n    return copy;\r\n  } else if (typeof arr === 'object') {\r\n    throw new Error('Cannot clone array containing an object!');\r\n  } else {\r\n    return arr;\r\n  }\r\n}\r\n\r\nconst alphabet = `а, б, в, г, ґ, д, е, є, ж, з, и, і, ї, й, к, л, м, н, о, п, р, с, т, у, ф, х, ц, ч, ш, щ, ь, ю, я, ,, .,  `;\r\n\r\nconst originalAlphabetArray = alphabet.split(', ');\r\nconst alphabetlGrid = originalAlphabetArray.chunk(6);\r\n\r\nconst keyWordToGrid = (key) => {\r\n  return [\r\n    ...key.split(''),\r\n    ...originalAlphabetArray.filter((c) => !key.split('').includes(c)),\r\n  ].chunk(6);\r\n};\r\n\r\nconst withUniceChars = (c) => Array.from(new Set(c)).join('');\r\n\r\nfunction App() {\r\n  const [keyGrid, setKeyGrid] = useState(arrayClone(alphabetlGrid));\r\n  const [keyWord, setKeyWord] = useState('');\r\n  const [sourceText, setSourceText] = useState('');\r\n\r\n  const handleKeyWordInput = ({ target: { value } }) => {\r\n    if (isValidString(value)) setKeyWord(withUniceChars(value));\r\n  };\r\n\r\n  const handleDecryptInput = ({ target: { value } }) => {\r\n    setSourceText(value);\r\n  };\r\n\r\n  const handleEncryptInput = ({ target: { value } }) => {\r\n    setSourceText(decryptString(value));\r\n  };\r\n\r\n  const enctyptChar = (c) => {\r\n    let x = -1;\r\n    let y = -1;\r\n\r\n    for (let row = 0; row < keyGrid.length; row++) {\r\n      for (let column = 0; column < keyGrid[row].length; column++) {\r\n        if (keyGrid[row][column] === c) {\r\n          x = row;\r\n          y = column;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (x === -1 || y === -1) return null;\r\n\r\n    if (x + 1 >= keyGrid.length) x = 0;\r\n    else x += 1;\r\n\r\n    return keyGrid[x][y];\r\n  };\r\n\r\n  const dectyptChar = (c) => {\r\n    let x = -1;\r\n    let y = -1;\r\n\r\n    for (let row = 0; row < keyGrid.length; row++) {\r\n      for (let column = 0; column < keyGrid[row].length; column++) {\r\n        if (keyGrid[row][column] === c) {\r\n          x = row;\r\n          y = column;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (x === -1 || y === -1) return null;\r\n\r\n    if (x - 1 === -1) x = keyGrid.length - 1;\r\n    else x -= 1;\r\n\r\n    return keyGrid[x][y];\r\n  };\r\n\r\n  const encryptString = (s) =>\r\n    s\r\n      .split('')\r\n      .map((c) => enctyptChar(c))\r\n      .join('');\r\n\r\n  const decryptString = (s) =>\r\n    s\r\n      .split('')\r\n      .map((c) => dectyptChar(c))\r\n      .join('');\r\n\r\n  const isValidString = (s) =>\r\n    s.split('').some((e) => originalAlphabetArray.includes(e));\r\n\r\n  useEffect(() => {\r\n    setKeyGrid(keyWordToGrid(keyWord));\r\n  }, [keyWord]);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div>\r\n        <div className='input'>\r\n          <span>Ключове слово</span>\r\n          <input type='text' onChange={handleKeyWordInput} value={keyWord} />\r\n        </div>\r\n        <div className='input'>\r\n          <span>Розшифрований текст</span>\r\n          <input type='text' onChange={handleDecryptInput} value={sourceText} />\r\n        </div>\r\n        <div className='input'>\r\n          <span>Зашифрований текст</span>\r\n          <input\r\n            type='text'\r\n            onChange={handleEncryptInput}\r\n            value={encryptString(sourceText)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <table>\r\n        {keyGrid.map((row) => (\r\n          <th>\r\n            {row.map((char) => (\r\n              <td>{char}</td>\r\n            ))}\r\n          </th>\r\n        ))}\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}